% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quarto_ext.R
\name{quarto_ext}
\alias{quarto_ext}
\title{Quarto extension for shinylive}
\usage{
quarto_ext(
  args = commandArgs(trailingOnly = TRUE),
  ...,
  pretty = is_interactive()
)
}
\arguments{
\item{args}{Command line arguments passed by the extension. See details for more information.}
}
\description{
Quarto extension for shinylive
}
\section{Command arguments}{


The first argument must be \code{"extension"}. This is done to match
\code{py-shinylive} so that it can nest other sub-commands under the \code{extension}
argument to minimize the api clutter the user can see.
\subsection{CLI Interface}{
\itemize{
\item \verb{extension info}
\itemize{
\item Prints information about the extension including:
\itemize{
\item \code{version}: The version of the R package
\item \code{assets_version}: The version of the web assets
\item \code{scripts}: A list of paths scripts that are used by the extension,
mainly \code{codeblock-to-json}
}
\item Shape

\if{html}{\out{<div class="sourceCode">}}\preformatted{[
 "version": string,]
}\if{html}{\out{</div>}}
}
\item \verb{extension base-htmldeps}
\itemize{
\item Prints the language agnostic quarto html dependencies as a JSON array.
\itemize{
\item The first html dependency is the \code{shinylive} service workers.
\item The second html dependency is the \code{shinylive} base dependencies. This
dependency will contain the core \code{shinylive} asset scripts (JS files
automatically sourced), stylesheets (CSS files that are automatically
included), and resources (additional files that the JS and CSS files can
source).
}
}
\item \verb{extension language-resources}
\itemize{
\item Prints the language-specific quarto html dependency resource files as a
JSON array. This includes the shinylive webr resource files.
}
\item \verb{extension app-resources}
\itemize{
\item Prints the app-specific quarto html dependency resource files as a JSON.
Currently this is an empty array.
}

TODO-barret; udpate docs in py-shinylive
TODO-barret; add comments to LUA file to describe what call does. Maybe add a paragraph at the top given a co-located docs? (idk)
\itemize{
\item \code{codeblock-to-json-path}: Prints the path to the \code{codeblock-to-json.js} script.
\item \code{base-deps}: Prints the base dependencies as a JSON array.
\item \code{package-deps}: Prints the package dependencies as a JSON array.
Currently, this returns an empty array as \code{webr} is handling the package
dependencies.
}
}
}
}

