# Workflow derived from https://github.com/rstudio/shiny-workflows
#
# NOTE: This Shiny team GHA workflow is overkill for most R packages.
# For most R packages it is better to use https://github.com/r-lib/actions
on:
  push:
    branches: [main, rc-**]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 9 * * 1" # every monday

name: Package checks

jobs:
  website:
    uses: rstudio/shiny-workflows/.github/workflows/website.yaml@v1
  routine:
    uses: rstudio/shiny-workflows/.github/workflows/routine.yaml@v1
  R-CMD-check:
    uses: rstudio/shiny-workflows/.github/workflows/R-CMD-check.yaml@v1

  integration:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Install quarto-ext/shinylive
        shell: bash
        run: |
          cd local/quarto
          quarto add schloerke/quarto-ext-shinylive@r-shinylive --no-prompt

      - name: Install R, system dependencies, and package dependencies
        uses: rstudio/shiny-workflows/setup-r-package@v1
        with:
          needs: quarto

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          repository: posit-dev/shinylive
          path: shinylive_assets

      - name: Build shinylive assets
        shell: bash
        run: |
          cd shinylive_assets
          make submodules
          make all

      - name: Link shinylive assets
        shell: Rscript {0}
        run: |
          # Link the assets

          # Assert no assets exist
          testthat::expect_equal(length(shinylive:::assets_versions()), 0)

          # Link the assets
          shinylive::assets_install_link("shinylive_assets")

          # Assert the assets were linked
          testthat::expect_gt(length(shinylive:::assets_versions()), 0)

          # Print installed info
          shinylive::assets_info()

      - name: Run shinylive R package tests
        env:
          TEST_ASSETS: "TRUE"
        shell: Rscript {0}
        run: |
          shinylive::assets_info()
          shinylive::assets_install_link("shinylive_assets")
          shinylive::assets_info()

          testthat::test_local()
      # If this (^^) completes, it is a big success!
      # Run quarto test after testthat test
      - name: Test shinylive quarto extension can build
        uses: quarto-dev/quarto-actions/render@v2
        with:
          path: local/quarto/

      # TODO-barret-future; Test the output of the render using pyright / py-shiny e2e controls?
